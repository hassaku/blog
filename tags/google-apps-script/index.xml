<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Apps Script on hassaku&#39;s blog</title>
    <link>http://blog.hassaku-labs.com/tags/google-apps-script/index.xml</link>
    <description>Recent content in Google Apps Script on hassaku&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by hassaku</copyright>
    <atom:link href="http://blog.hassaku-labs.com/tags/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GASで作る日常ツールあれこれ</title>
      <link>http://blog.hassaku-labs.com/post/gas/</link>
      <pubDate>Wed, 01 May 2019 10:00:00 +0900</pubDate>
      
      <guid>http://blog.hassaku-labs.com/post/gas/</guid>
      <description>

&lt;h1 id=&#34;基本-google-apps-scriptの作り方&#34;&gt;【基本】Google Apps Scriptの作り方&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;スプレッドシート作成&lt;/li&gt;
&lt;li&gt;ツール - スクリプトエディタ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;基本-webapi化の共通事項&#34;&gt;【基本】WebAPI化の共通事項&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;doPostという関数&lt;/li&gt;
&lt;li&gt;公開 &amp;gt; webアプリケーションとして導入 を選び公開&lt;/li&gt;
&lt;li&gt;コードを修正した場合、バージョン に 新規作成 を選択する必要がある。&lt;/li&gt;
&lt;li&gt;アクセス出来るユーザは全員（匿名）にしておくこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;基本-簡単なデータストア先として活用&#34;&gt;【基本】簡単なデータストア先として活用&lt;/h1&gt;

&lt;p&gt;WiFi接続のセンサモジュールとか、ちょっとしたものからデータを記録していきたいときに利用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sheet = SpreadsheetApp.openById(URLのところに表示されるID).getSheetByName(シート名);

function doPost(e) {
  var array = [e.parameter.timestamp, e.parameter.sensor_id, e.parameter.value];
  sheet.appendRow(array);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ curl -X POST -F &amp;quot;timestamp=`date &amp;quot;+%Y%m%d %H:%M:%S&amp;quot;`&amp;quot; -F &#39;sensor_id=1234&#39; -F &#39;value=5678&#39; 公開時に表示されるURL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スプレッドシートにデータが追記されていくので、それをCSV化してデータ分析するなり、簡単に可視化するなり。&lt;/p&gt;

&lt;h1 id=&#34;基本-slack通知の共通部分&#34;&gt;【基本】Slack通知の共通部分&lt;/h1&gt;

&lt;p&gt;以下の各事例でも頻繁に使われてる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
リソース - ライブラリから以下を追加
- SlackApp: M3W5Ut3Q39AaIwLquryEPMwV62A3znfOO
- Underscore: MGwgKN2Th03tJ5OdmlzB8KPxhMjh3Sh48
- Moment: MHMchiX6c1bwSqGM1PZiW_PxhMjh3Sh48
*/

var _ = Underscore.load();
var TOKEN = &amp;quot;SLACK_TOKEN&amp;quot;;

var slackApp = SlackApp.create(TOKEN);

function getChannelId(name) {
  // チャンネル名から通知に必要なIDを取得
  var channel = _.findWhere(slackApp.channelsList().channels, {name: name});
  if (_.isEmpty(channel)) {
    throw new Error(name + &amp;quot; is not found&amp;quot;);
  }
  return channel.id
}

function postMessage(channel_name, message) {
  // 任意のメッセージを通知
  var channelId = getChannelId(slackApp, channel_name);

  slackApp.chatPostMessage(channelId, message, {
    username : &amp;quot;bot&amp;quot;,
    icon_emoji : &amp;quot;:mega:&amp;quot;
  });
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;googleドキュメント-スライド定期複製&#34;&gt;Googleドキュメント・スライド定期複製&lt;/h1&gt;

&lt;p&gt;定例ミーティングなどで、毎回人手で過去分議事録をコピーして、事前メモ用ドキュメントを作成しているケースがあったので自動化した。
コピー元は、前回分とかではなく、毎回決まったテンプレートとかを指定しても良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function createCopy(fileId, fileName) {
  // 最新の日付を付けたコピーを作成
  var date = new Date();
  date.setDate(date.getDate());
  var formattedDate = Utilities.formatDate(date, &amp;quot;JST&amp;quot;, &amp;quot;yyyyMMdd&amp;quot;);
  var f = DriveApp.getFileById(fileId);

  f = f.makeCopy(formattedDate + &amp;quot;_&amp;quot; + fileName);
  return f.getUrl();
}

function latestFileId(folderId, fileName) {
  // 前回分のファイルを取得
  var folder = DriveApp.getFolderById(folderId);
  var contents = folder.getFiles();

  var latest = 0;
  var latestFileId = 0;

  while(contents.hasNext()) {
    var file = contents.next();
    var name = file.getName();

    if (!name.match(new RegExp(&amp;quot;^.*_&amp;quot; + fileName +&amp;quot;$&amp;quot;))) {
      continue;
    }

    // 20190501_XXXXX みたいな名称を想定
    var updatedAt = parseInt(name.slice(0, 10), 10);
    var fileId = file.getId()

    if(latest &amp;lt; updatedAt) {
      latest = updatedAt;
      latestFileId = fileId;
    }
  }
  return latestFileId;
};

function main() {
  var channel_name = &amp;quot;通知したいSlackチャンネル名&amp;quot;;
  var fileName = &amp;quot;XXXXX&amp;quot;;
  var folderId = &amp;quot;Google Driveで対象ファイルが配置されているフォルダのURLに含まれるID&amp;quot;;

  var fileId = latestFileId(folderId, fileName);
  var url = createCopy(fileId, fileName);
  postMessage(channel_name, &amp;quot;XXXXXのアジェンダを作成しました。 -&amp;gt; &amp;quot; + url);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;編集 - 現在のプロジェクトのトリガーからmain指定すれば、定期実行させることが出来る&lt;/p&gt;

&lt;h1 id=&#34;ドライブ更新通知&#34;&gt;ドライブ更新通知&lt;/h1&gt;

&lt;p&gt;ドライブにファイルが追加されたりしたときにSlack通知&lt;/p&gt;

&lt;p&gt;予めconfigというシートにfolder_id, slack_channel, messageの列を作っておき、
- floder_id
  - Google Driveの対象フォルダのURLに含まれるID
- slack_channel
  - 通知したいSlackチャンネル名
- message
  - 通知時のメッセージ
を定義しておくこと。複数可。&lt;/p&gt;

&lt;p&gt;また、トリガは１分ごと実行に設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var INTERVAL_MINUTES = 1;  // １分以内に更新されたやつを対象とする

function checkFolder(folderId, channelName, message) {
  var folder = DriveApp.getFolderById(folderId);
  var now = Moment.moment();
  var updates = [];

  var files = folder.getFiles();
  while (files.hasNext()) {
    var file = files.next();
    var updatedAt = Moment.moment(file.getLastUpdated());
    var elapsedMinutes = (now - updatedAt) / 1000 / 60

    if (elapsedMinutes &amp;lt; INTERVAL_MINUTES) {
      updates.push(file.getName());
    }
  }

  var folders = folder.getFolders();
  while (folders.hasNext()) {
    var folder = folders.next();
    var updatedAt = Moment.moment(folder.getLastUpdated());
    var elapsedMinutes = (now - updatedAt) / 1000 / 60

    if (elapsedMinutes &amp;lt; INTERVAL_MINUTES) {
      updates.push(folder.getName());
    }
  }

  if (_.isEmpty(updates)) {
    return;
  }

  message = updates.join(&#39;, &#39;) + &amp;quot; was updated at https://drive.google.com/drive/u/0/folders/&amp;quot; + folderId + &#39;\n&#39; + message
  postMessage(message, channelName)
}

function main() {
  var sheet = SpreadsheetApp.getActive().getSheetByName(&#39;config&#39;);
  var rows = sheet.getDataRange().getValues();

  _.each(rows, function(row, i){
    if (i==0) return;  // skip header
    var folderId = row[0];
    var channelName = row[1];
    var message = row[2];
    checkFolder(folderId, channelName, message);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;slack新規チャンネル通知&#34;&gt;Slack新規チャンネル通知&lt;/h1&gt;

&lt;p&gt;チャンネルが乱立し始めた頃、新しくチャンネルが出来たら通知して欲しいとの要望から作成した。
予めconfigという空シートを作成しておくこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CHANNEL_NAME = &amp;quot;lobby&amp;quot;;
var SHEET_NAME = &amp;quot;config&amp;quot;;
var ADDITIONAL_MESSAGE = &amp;quot;新しく作成されたチャンネルがあります。 &amp;quot;

function main() {
  var slackApp = SlackApp.create(TOKEN);
  var currentChannels = _.pluck(slackApp.channelsList().channels, &#39;name&#39;);
  var newChannels = [];

  var message = &#39;&#39;;
  var sheet = SpreadsheetApp.getActive().getSheetByName(SHEET_NAME);
  var rows = _.map(sheet.getDataRange().getValues(), function(elm){ return elm.toString(); });

  _.each(currentChannels, function(channel, i) {
    if (!_.include(rows, channel)) {
      message += &amp;quot; #&amp;quot; + channel;
      newChannels.push(channel);
    }
  });

  _.each(newChannels, function(channel, i) {
    sheet.getRange(&#39;A&#39; + (currentChannels.length - newChannels.length + i + 1)).setValue(channel);
  });

  if (message) postMessage(slackApp, ADDITIONAL_MESSAGE + message);

  _.each(currentChannels, function(channel, i) {
    sheet.getRange(&#39;A&#39; + (i+1)).setValue(channel);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;環境センサ通知ボット&#34;&gt;環境センサ通知ボット&lt;/h1&gt;

&lt;p&gt;オフィスに人が増えてきて、場所によっては酸素が薄いみたいな話がチラホラ聞こえてきた。
なので、そのへんに転がってた（？）Netatmoをばら撒いて、二酸化炭素濃度が上がってきたら通知するようにした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CHANNEL_NAME = &amp;quot;lobby&amp;quot;;
var THRESHOLD = 2000; // 通知しきい値
var STATION_NAME = &amp;quot;entrance&amp;quot;;  // Netatmoにつけた名称

function getToken() {
  var url = &#39;https://api.netatmo.net/oauth2/token&#39;;
  var options = {
    &#39;method&#39;: &#39;post&#39;,
    &#39;payload&#39;: {
      &#39;grant_type&#39;: &#39;password&#39;,  // パスワードフローでOAuthトークンを取得
      &#39;username&#39;: &#39;hoge@fuga.com&#39;,
      &#39;password&#39; : &#39;XXXXXXX&#39;,
      &#39;client_id&#39;: &#39;XXXXXXX&#39;,  // このへんの情報はNetatmoの設定ページから取得できる
      &#39;client_secret&#39;: &#39;XXXXXXX&#39;
     }
  };
  var json = UrlFetchApp.fetch(url, options).getContentText();
  var jsonData = JSON.parse(json);
  var token = jsonData[&amp;quot;access_token&amp;quot;];
  return token;
}

function getCo2() {
  var url = &amp;quot;https://api.netatmo.com/api/getstationsdata&amp;quot;;
  var options = {
    &amp;quot;headers&amp;quot; : {
      &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer &amp;quot; + getToken()
    }
  };
  var json = UrlFetchApp.fetch(url, options);
  var jsonData = JSON.parse(json);
  var co2 = undefined
  jsonData[&amp;quot;body&amp;quot;][&amp;quot;devices&amp;quot;].some(function(device, i) {
    if(device[&amp;quot;station_name&amp;quot;] === STATION_NAME) {
      co2 = parseInt(device[&amp;quot;dashboard_data&amp;quot;][&amp;quot;CO2&amp;quot;], 10); // Netatmoは二酸化炭素以外にも気温、湿度とか色々取れるはず
    }
  });
  if(!co2) {
    throw new Error(&amp;quot;CO2が取得できませんでした&amp;quot;);
  }
  return co2;
}

function main() {
  var co2 = getCo2();
  if(co2 &amp;gt; THRESHOLD) {
    postMessage(CHANNEL_NAME, &amp;quot;オフィスの二酸化炭素濃度:&amp;quot; + co2 + &amp;quot;が閾値:&amp;quot; + THRESHOLD + &amp;quot;を上回りました。換気をするか、呼吸を控えてください。&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;slack簡易対話ボット&#34;&gt;Slack簡易対話ボット&lt;/h1&gt;

&lt;p&gt;自分用のチャンネルがあって、そこに訪問する人に対して、簡易的に応答するボットを用意している。&lt;/p&gt;

&lt;p&gt;予め「responses」というシートに「発話内容」と「応答内容」の２列で色々と定義しておくこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var MAIN_CHANNEL_NAME = &amp;quot;my_room&amp;quot;;
var SUB_CHANNEL_NAME = &amp;quot;bot_room&amp;quot;;

function convertTime(unixtime) {
  var date = Moment.moment(new Date(unixtime*1000));
  return date.format(&amp;quot;YYYY-MM-DD_HH:mm:ss&amp;quot;);
}

function doPost(e) {
  if(e.parameter.userName === &amp;quot;slackbot&amp;quot;) {
    return null; // 無限ループ防止
  }

  if (prop.verifyToken != e.parameter.token) {
    throw new Error(&amp;quot;invalid token.&amp;quot;);
  }

  if(e.parameter.channel_name === MAIN_CHANNEL_NAME) {
    var userName = e.parameter.user_name;
    sheet = SpreadsheetApp.getActive().getSheetByName(userName);

    if(!sheet) {
      sheet = SpreadsheetApp.getActive().insertSheet(userName);

      // 初めて投稿してくれた人へのメッセージ
      slackApp.chatPostMessage(e.parameter.channel_id, &amp;quot;ようこそ。&amp;quot; + e.parameter.user_name + &amp;quot;さん&amp;quot;, {
        username : &amp;quot;bot&amp;quot;,
        icon_emoji : &amp;quot;:penguin:&amp;quot;
      });
    }

    // 投稿内容に応じたレスポンスを返す
    response = findResponse(e.parameter.text);
    if(response) {
      slackApp.chatPostMessage(e.parameter.channel_id, response, {
        username : &amp;quot;bot&amp;quot;,
        icon_emoji : &amp;quot;:penguin:&amp;quot;
      });
    } else {
      // 特にレスポンス内容が見つからなければ、SUB_CHANNEL_NAMEに投稿するだけ
      postMessage(SUB_CHANNEL_NAME, e.parameter.text);
    }

    // 後々の応答例用意のためにも、訪問者の投稿は保存（問題なさそうなチャンネルかどうかは要注意）。
    //sheet.appendRow([convertTime(e.parameter.timestamp), e.parameter.text, response]);

  } else {
    // SUB_CHANNEL_NAMEに投稿した内容をMAIN_CHANNEL_NAMEに投稿。元の投稿者からはあたかもbotが応答したように見える（かも）
    postMessage(MAIN_CHANNEL_NAME, e.parameter.text);
  }

  return null;
}

function findResponse(utterance) {
  // &amp;quot;responses&amp;quot;シートに定義された対話例の中から、発言を含むものを探し、あれば応答する。なければundefinedで応答しない。
  var response = getResponses().reduce(function(cache, row) { return cache || ((utterance.indexOf(row.utterance) != -1) &amp;amp;&amp;amp; row.response); }, false) || undefined;
  return response;
}

function getResponses() {
  var sheet = SpreadsheetApp.getActive().getSheetByName(&amp;quot;responses&amp;quot;);
  var data = sheet.getDataRange().getValues();
  return data.map(function(row) { return {utterance: row[0], response: row[1]}; }); // １列目が発話内容、２列目が応答内容
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;googleカレンダー予定簡易確認ボット&#34;&gt;Googleカレンダー予定簡易確認ボット&lt;/h1&gt;

&lt;p&gt;協力会社の方など、社員用カレンダーを見れないが、（カレンダーで管理されている）会議室の予約をしたいという要望があった。
そのため、Slack上のスラッシュコマンドで空きの確認及び予約の作成を出来るようにした。&lt;/p&gt;

&lt;p&gt;使い方&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 予約済み時間の確認
/room small list 2019/03/17

2. 予約の登録
/room small create 2019/03/17 09:00 09:30 Aさんと1on1

小会議室：small
大会議室：large
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://api.slack.com/apps&#34;&gt;https://api.slack.com/apps&lt;/a&gt;  にて、Create New Appすることにより、スラッシュコマンドで呼び出すBotを作る。
Botから呼び出し、カレンダーの管理をするGASは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doPost(e) {
  if (prop.verifyToken != e.parameter.token) {
    throw new Error(&amp;quot;invalid token.&amp;quot;);
  }

  var commands = e.parameter.text.split(&amp;quot; &amp;quot;);
  var roomType = commands[0];
  var command = commands[1];
  var targetDate = commands[2];

  if(roomType == &amp;quot;large&amp;quot;) {
    var cal = CalendarApp.getCalendarById(&amp;quot;大会議室のカレンダーID (Googleカレンダーの詳細ページに記載されているはず)&amp;quot;);
  } else if(roomType == &amp;quot;small&amp;quot;) {
    var cal = CalendarApp.getCalendarById(&amp;quot;小会議室のカレンダーID&amp;quot;);
  }

  if(command == &amp;quot;list&amp;quot;) {
    // 予約の確認
    var text = &#39;[予約済み]\n&#39;;
    var date = new Date(targetDate);　
    var events = cal.getEventsForDay(date);
    for each (var event in events) {
      var start = event.getStartTime();
      var end = event.getEndTime();
      text += &amp;quot;開始時刻: &amp;quot; + start.getHours() + &amp;quot;:&amp;quot; + start.getMinutes() + &amp;quot; 終了時刻: &amp;quot; + end.getHours() + &amp;quot;:&amp;quot; + end.getMinutes() + &#39;\n&#39;;
    }
  } else if (command == &amp;quot;create&amp;quot;) {
    // 予約の作成
    var text = &#39;予約を作成しました&#39;;
    var targetStart = commands[3];
    var targetEnd = commands[4];
    var eventName = commands[5];
    var start = new Date(targetDate + &amp;quot; &amp;quot; + targetStart);　
    var end = new Date(targetDate + &amp;quot; &amp;quot; + targetEnd);　
    cal.createEvent(eventName, start, end, {description: &#39;Created By Bot&#39;});
  }

  var res = {response_type: &amp;quot;in_channel&amp;quot;, text: text};
  return ContentService.createTextOutput(JSON.stringify(res)).setMimeType(ContentService.MimeType.JSON);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;チャンネル常時翻訳&#34;&gt;チャンネル常時翻訳&lt;/h1&gt;

&lt;p&gt;英語常用の社員も増えてきたし、言語由来の壁が出来ないように、雑談用のチャンネルは常時機械翻訳するようにした。
翻訳精度はまだ怪しいが、雰囲気の共有くらいは出来る（はず）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var JA_CHANNEL_NAME = &amp;quot;lobby_ja&amp;quot;;
var TRANS_JA_CHANNEL_NAME = &amp;quot;lobby_ja_trans&amp;quot;;

var EN_CHANNEL_NAME = &amp;quot;lobby_en&amp;quot;;
var TRANS_EN_CHANNEL_NAME = &amp;quot;lobby_en_trans&amp;quot;;

function doPost(e) {
  if(e.parameter.user_name === &amp;quot;slackbot&amp;quot;) {
    return null; // 無限ループ防止
  }

  if(e.parameter.channel_name === JA_CHANNEL_NAME) {
    var translation = LanguageApp.translate(e.parameter.text, &#39;ja&#39;, &#39;en&#39;);
    postMessage(TRANS_JA_CHANNEL_NAME, e.parameter.user_name, translation);

  } else if(e.parameter.channel_name === EN_CHANNEL_NAME) {
    var translation = LanguageApp.translate(e.parameter.text, &#39;en&#39;, &#39;ja&#39;);
    postMessage(TRANS_EN_CHANNEL_NAME, e.parameter.user_name, translation);
  }

  return null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;okになった行を隠す&#34;&gt;OKになった行を隠す&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;function main(){
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(&amp;quot;対象のシート名&amp;quot;);
  var maxRows = sheet.getMaxRows();

  sheet.showRows(1, maxRows);
  var data = sheet.getRange(&#39;AF:AF&#39;).getValues();  // AF列にOKと記入されている想定

  for(var i=0; i&amp;lt; data.length; i++){
    if(data[i][0] == &#39;OK&#39;){
      sheet.hideRows(i+1);  // 行を隠す
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>