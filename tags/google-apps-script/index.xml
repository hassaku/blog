<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Apps Script on hassaku&#39;s blog</title>
    <link>https://blog.hassaku-labs.com/tags/google-apps-script/</link>
    <description>Recent content in Google Apps Script on hassaku&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 01 May 2019 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://blog.hassaku-labs.com/tags/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GASで作る日常ツールあれこれ</title>
      <link>https://blog.hassaku-labs.com/post/gas/</link>
      <pubDate>Wed, 01 May 2019 10:00:00 +0900</pubDate>
      <guid>https://blog.hassaku-labs.com/post/gas/</guid>
      <description>&lt;h1 id=&#34;基本google-apps-scriptの作り方&#34;&gt;【基本】Google Apps Scriptの作り方&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;スプレッドシート作成&lt;/li&gt;&#xA;&lt;li&gt;ツール - スクリプトエディタ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;基本webapi化の共通事項&#34;&gt;【基本】WebAPI化の共通事項&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;doPostという関数&lt;/li&gt;&#xA;&lt;li&gt;公開 &amp;gt; webアプリケーションとして導入 を選び公開&lt;/li&gt;&#xA;&lt;li&gt;コードを修正した場合、バージョン に 新規作成 を選択する必要がある。&lt;/li&gt;&#xA;&lt;li&gt;アクセス出来るユーザは全員（匿名）にしておくこと&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;基本簡単なデータストア先として活用&#34;&gt;【基本】簡単なデータストア先として活用&lt;/h1&gt;&#xA;&lt;p&gt;WiFi接続のセンサモジュールとか、ちょっとしたものからデータを記録していきたいときに利用&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var sheet = SpreadsheetApp.openById(URLのところに表示されるID).getSheetByName(シート名);&#xA;&#xA;function doPost(e) {&#xA;  var array = [e.parameter.timestamp, e.parameter.sensor_id, e.parameter.value];&#xA;  sheet.appendRow(array);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -X POST -F &amp;#34;timestamp=`date &amp;#34;+%Y%m%d %H:%M:%S&amp;#34;`&amp;#34; -F &amp;#39;sensor_id=1234&amp;#39; -F &amp;#39;value=5678&amp;#39; 公開時に表示されるURL&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;スプレッドシートにデータが追記されていくので、それをCSV化してデータ分析するなり、簡単に可視化するなり。&lt;/p&gt;&#xA;&lt;h1 id=&#34;基本slack通知の共通部分&#34;&gt;【基本】Slack通知の共通部分&lt;/h1&gt;&#xA;&lt;p&gt;以下の各事例でも頻繁に使われてる&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*&#xA;リソース - ライブラリから以下を追加&#xA;- SlackApp: M3W5Ut3Q39AaIwLquryEPMwV62A3znfOO&#xA;- Underscore: MGwgKN2Th03tJ5OdmlzB8KPxhMjh3Sh48&#xA;- Moment: MHMchiX6c1bwSqGM1PZiW_PxhMjh3Sh48&#xA;*/&#xA;&#xA;var _ = Underscore.load();&#xA;var TOKEN = &amp;#34;SLACK_TOKEN&amp;#34;;&#xA;&#xA;var slackApp = SlackApp.create(TOKEN);&#xA;&#xA;function getChannelId(name) {&#xA;  // チャンネル名から通知に必要なIDを取得&#xA;  var channel = _.findWhere(slackApp.channelsList().channels, {name: name});&#xA;  if (_.isEmpty(channel)) {&#xA;    throw new Error(name + &amp;#34; is not found&amp;#34;);&#xA;  }&#xA;  return channel.id&#xA;}&#xA;&#xA;function postMessage(channel_name, message) {&#xA;  // 任意のメッセージを通知&#xA;  var channelId = getChannelId(slackApp, channel_name);&#xA;&#xA;  slackApp.chatPostMessage(channelId, message, {&#xA;    username : &amp;#34;bot&amp;#34;,&#xA;    icon_emoji : &amp;#34;:mega:&amp;#34;&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;googleドキュメントスライド定期複製&#34;&gt;Googleドキュメント・スライド定期複製&lt;/h1&gt;&#xA;&lt;p&gt;定例ミーティングなどで、毎回人手で過去分議事録をコピーして、事前メモ用ドキュメントを作成しているケースがあったので自動化した。&#xA;コピー元は、前回分とかではなく、毎回決まったテンプレートとかを指定しても良い。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
